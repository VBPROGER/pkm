#!/usr/bin/python3
# -*- coding: utf-8 -*-
import requests, os, stat, subprocess
from platform import system as pl
from sys import argv as args_parser

name = 'pkm'
version = '1.0.0'
prefix = 'pkm'
pl = str(str(pl()).lower())
if pl == 'linux':
    pkm_local_path = os.path.join(os.path.expanduser('~'), '.config', 'pkm')
elif pl == 'windows':
    pkm_local_path = os.path.join(os.path.expanduser('~'), 'AppData', 'Local', 'PKM File Manager')
else:
    pkm_local_path = os.path.join(os.path.expanduser('~'), '.config', 'pkm')
pkm_local_packages_path = os.path.join(str(pkm_local_path), str('packages'))

def setup(*args):
    os.system('mkdir -p '+str(pkm_local_path))
    os.system('mkdir -p '+str(pkm_local_packages_path))
def log(string = '', *args):
    if not string == '' or string == None:
        print(str(name)+': '+str(string))
def logerror(string = '', *args):
    if not string == '' or string == None:
        print(str(name)+'.error: '+str(string))
def logsuccess(string = '', *args):
    if not string == '' or string == None:
        print(str(name)+'.success: '+str(string))
def downloadpkg(name = '0b', *args):
    log('Searching for package "'+name+'"...')
    name = str(name)
    link = 'https://raw.githubusercontent.com/VBPROGER/pkm/main/download/'+str(name.replace(' ','-'))+'.pkmfile'
    log('Reading content of package "'+name+'"...')
    try:
        f = requests.get(link)
    except BaseException:
        log('Package "'+name+'" was not found on server')
        log('Your internet connection may be off or is poor')
        return False
    content = str(f.text)
    if content.replace('\n', '') == '404: Not Found':
        log('Package "'+name+'" was not found on server')
        return False
    f.close()
    log('Saving package "'+name+'" to local installed packages folder...')
    file_name = str(os.path.join(pkm_local_path, 'packages', name+'.pkmfile'))
    with open(file_name, 'w') as f:
        f.write(content)
        f.close()
    st = os.stat(file_name)
    log('Giving execute permissions to package "'+name+'"... (final step)')
    os.chmod(file_name, st.st_mode | stat.S_IEXEC)
    log('Done, the package "'+name+'" was successfully installed')
    return True
def runpkg(pkg = '0b', local_package = True, shell = True, *args):
    try:
        pkg = str(pkg)
        pkg += '.pkmfile'
        pkg_pkmfile = pkg
        log('Attempting to execute package "'+pkg_pkmfile+'"')
        if local_package == True:
            pkg = os.path.join(pkm_local_packages_path, pkg)
        else: pkg = pkg
        if os.path.isfile(pkg) and os.path.exists(pkg):
            subprocess.call(pkg, shell = shell)
            logsuccess('Executed package "'+pkg_pkmfile+'" successfully')
            return True
        else:
            logerror('Error while attempting to execute package "'+pkg_pkmfile+'"'+": this package doesn't exist or not installed")
            return False
    except BaseException:
        logerror('Failed to execute package "'+pkg_pkmfile+'"')
        return False
def uninstallpkg(pkg, *args):
    try:
        pkg = os.path.join(str(pkm_local_packages_path), str(pkg))
        pkg += '.pkmfile'
        pkg_pkmfile = pkg
        log('Attempting to uninstall package "'+pkg_pkmfile+'"')
        if os.path.isfile(pkg) and os.path.exists(pkg):
            os.remove(pkg)
            logsuccess('Uninstalled package "'+pkg_pkmfile+'" successfully')
            return True
        else:
            logerror('Error while attempting to uninstall package "'+pkg_pkmfile+'"'+": this package is not installed")
            return False
    except BaseException:
        logerror('Failed to uninstall package "'+pkg_pkmfile+'"')
        return False
def argument_parser(*args) -> None:
    if len(args_parser) <= 1:
        log('Invalid command! Type "'+str(name)+'" --help for more info.')
        return False
    try:
        Arg1 = args_parser[1]
        Arg1 = Arg1.lower()
        Arg2 = args_parser[2]
        Arg2 = Arg2.lower()
        Arg3 = args_parser[3]
        Arg3 = Arg3.lower()
        Arg4 = args_parser[4]
        Arg4 = Arg4.lower()
    except BaseException:
        pass
    if Arg1 == '--help' or Arg1 == '-h' or Arg1 == '--h':
        n = 'Command: ' + str(name) + ''
        print(str(name)+'.help: List of aviable commands')
        print(f''' - LIST -
{n} install <package-name> - download package by name
{n} uninstall <package-name> - delete package from current PC by name
{n} run <package-name> - run package by name
{n} runhere <path-to-package> - run package by name (in current folder or /path/to/file/foo.pkmfile)
- LIST END -''')
        return True
    try:
        if Arg1 == 'install':
            downloadpkg(Arg2)
            return True
        elif Arg1 == 'run':
            runpkg(pkg = Arg2, local_package = True, shell = True)
        elif Arg1 == 'runhere':
            runpkg(pkg = Arg2, local_package = False, shell = True)
        elif Arg1 == 'uninstall':
            uninstallpkg(pkg = Arg2)
    except BaseException as e:
        log('Uncompleted or invalid command! Type "'+str(name)+'" --help for more info.')
        log('This may be an error: '+str(e))
        return False
setup()
argument_parser()
